package leetcode;

import java.util.Arrays;
//Input: flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6
//Input: flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1
//[8,2] 24 18 6 3
//[18,16,10,10,5]  10   3    15     4
//[13] 18  15  9  2
//[5,19,1,1,6,10,18,12,20,10,11] 6  20  3  11
//[89287,5538,37141,72522,84502,44451,24432,2324,72779,57060,99178,6,29440,53664,76197,46742,17384,22072,33067,66274,19323,72943,12914,91475,96826,84847,28100,89590,34977,74052,4813,24563,97491,71687,8533,49262,2265,10553,63902,19647,27006,64548,89892,64046,72766,34623,17297,21417,70630,93469,83379,19483,93842,65968,28401,1889,24441,99401,37907,13794,3640,95432,36875,10200,95360,10829,96763,15900,8490,68972,52537,72458,95269]
//        42
//        4534
//        32415
//        11040
//[64753,70721,35179,14240,85904,41870,19694,36688,99646,49085,85619,26435,18771,55583,60427,72027,44868,95581,98990,81882,51628,82625,43425,74385,63862,53800,76884,13139,63703,68373,81076,18220,91633,52737,65764,89790,42570,19317,43152,65395,28911,46582,25554,76178,9173,25436,5842,54867,52028,58952,63094,29583,11598,69236,68720,19564,2757,57855,60757,23659,67839,32038,65734,15290,42556,48913,13312,96397,27608,42084,98068,68397,29079,4376,97930,52427,11075,13088,81742,29956,21925,49807,67952,16287,68255,57174,59840,77891,40221,3156,5128,3497,65228,93320,68648,33111,9676,97523,39295,52427,74753,7798,89393,60840,55642,9150,5029,12613,85348,84827,25601,95020,86573,73326,63948,49911,62048,42886,80491,83517,85604,37006,56101,21357,71697,73275,82457,91209,59471,92914,70091,36917,63223,12256,60120,20354,61169,49300,40539,97203,84401,54030,506,83883,75217,63499,46032,7437,96915,32796,98461,14572,11146,5326,17821,86744,44579,44213,66468,20471,38854,44697,99750,63414,24457,66770,62214,60029,18358,87031,11454,96612,31108,8877,27205,40854,90185,52276,59947,67499,16375,33772,5300,591,89451,197,73076,74487,40029,77991,71909,19864,27554,64674,27391,88798,92353,54954,39830,57000,65183,79551,47415,70699,53812,79880,96880,55432,85877,67140,16297,90637,581,22493,20043,92338,7151,48283,42379,69667,34839,65754,942,7666,30914,47012,27900,19866,98873,86437,38098,57219,24538,34548,6735,86260,98999,42451,34032,18392,26693,92306,18429,86527,19493,56794,27966,79551,22829,99628,5979,37492,83251,40886,23767,72893,79000,29487,74422,39852]
//        3463894
//        65243
//        40780
//        47
//[5,19,1,1,6,10,18,12,20,10,11]
//        6
//        20
//        3
//        11
public class S2234 {
    public static void main(String[] args) {
        System.out.println(new S2234().maximumBeauty(new int[]{1,3,1,1}, 7, 6, 12, 1));
        System.out.println(new S2234().maximumBeauty(new int[]{8,2}, 24, 18, 6, 3));
        System.out.println(new S2234().maximumBeauty(new int[]{18,16,10,10,5}, 10, 3, 15, 4));
        System.out.println(new S2234().maximumBeauty(new int[]{13}, 18, 15, 9, 2));
        System.out.println(new S2234().maximumBeauty(new int[]{5,19,1,1,6,10,18,12,20,10,11}, 6, 20, 3, 11));
        System.out.println(new S2234().maximumBeauty(new int[]{89287,5538,37141,72522,84502,44451,24432,2324,72779,57060,99178,6,29440,53664,76197,46742,17384,22072,33067,
                66274,19323,72943,12914,91475,96826,84847,28100,89590,34977,74052,4813,24563,97491,71687,8533,49262,2265,10553,63902,19647,27006,64548,89892,64046,72766,
                34623,17297,21417,70630,93469,83379,19483,93842,65968,28401,1889,24441,99401,37907,13794,3640,95432,36875,10200,
                95360,10829,96763,15900,8490,68972,52537,72458,95269}, 42, 4534, 32415, 11040));
        System.out.println(new S2234().maximumBeauty(new int[]{100000,100000,100000,100000,100000}, 10000000000L,100000,100000,100000));
        System.out.println(new S2234().maximumBeauty(new int[]{64753,70721,35179,14240,85904,41870,19694,36688,99646,49085,85619,26435,18771,55583,60427,72027,44868,95581,98990,81882,51628,82625,43425,74385,63862,53800,76884,13139,63703,68373,81076,18220,91633,52737,65764,89790,42570,19317,43152,65395,28911,46582,25554,76178,9173,25436,5842,54867,52028,58952,63094,29583,11598,69236,68720,19564,2757,57855,60757,23659,67839,32038,65734,15290,42556,48913,13312,96397,27608,42084,98068,68397,29079,4376,97930,52427,11075,13088,81742,29956,21925,49807,67952,16287,68255,57174,59840,77891,40221,3156,5128,3497,65228,93320,68648,33111,9676,97523,39295,52427,74753,7798,89393,60840,55642,9150,5029,12613,85348,84827,25601,95020,86573,73326,63948,49911,62048,42886,80491,83517,85604,37006,56101,21357,71697,73275,82457,91209,59471,92914,70091,36917,63223,12256,60120,20354,61169,49300,40539,97203,84401,54030,506,83883,75217,63499,46032,7437,96915,32796,98461,14572,11146,5326,17821,86744,44579,44213,66468,20471,38854,44697,99750,63414,24457,66770,62214,60029,18358,87031,11454,96612,31108,8877,27205,40854,90185,52276,59947,67499,16375,33772,5300,591,89451,197,73076,74487,40029,77991,71909,19864,27554,64674,27391,88798,92353,54954,39830,57000,65183,79551,47415,70699,53812,79880,96880,55432,85877,67140,16297,90637,581,22493,20043,92338,7151,48283,42379,69667,34839,65754,942,7666,30914,47012,27900,19866,98873,86437,38098,57219,24538,34548,6735,86260,98999,42451,34032,18392,26693,92306,18429,86527,19493,56794,27966,79551,22829,99628,5979,37492,83251,40886,23767,72893,79000,29487,74422,39852}, 3463894,65243,40780,47));


        //2734140
    }

    public long maximumBeauty(int[] f, long nf, int t, long full, long partial) {
        Arrays.sort(f);
        long res = 0;
        long[] s = new long[f.length];

        s[0]=0;
        for (int i = 1; i < f.length; i++) {
            s[i]=(f[i]-f[i-1])*i+s[i-1];
        }

        long rest = nf;
        for (int i = f.length; i >= 0; i--) {
            if(i < f.length && t - f[i] > 0) {
                rest -= t - f[i];
            }

            if(rest<0) {
                return res;
            }
            int j;

            if(i>0&&s[i-1]<=rest) {
                j = i-1;
            } else {
                j = Arrays.binarySearch(s, rest);
                j = j>=0?j:-j-2;
            }
            long level = i==0||f[0]>=t?0:Math.min(t-1, f[j]+(rest-s[j])/(j+1));
            res = Math.max(res, (f.length-i)*full+level*partial);
        }

        return res;
    }
}
